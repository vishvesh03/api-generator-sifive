tuple BuildTree =
  global Root: String

global def rootBuildTree = BuildTree "build/{here}"
global def buildTreeSubDir subdir (BuildTree root) = BuildTree "{root}/{subdir}".simplify

def getBuildTreeFirrtlDir     (BuildTree root) = "{root}/firrtl"
def getBuildTreeVerilogDir    (BuildTree root) = "{root}/verilog"
def getBuildTreeSimulationDir (BuildTree root) simulator = "{root}/sim/{simulator}"
def getBuildTreeSimExecuteDir (BuildTree root) simulator programName = "{root}/sim/{simulator}/execute/{programName}"
def getBuildTreeSimCompileDir (BuildTree root) simulator = "{root}/sim/{simulator}/compile"
def getBuildTreeProgramDir    (BuildTree root) programName = "{root}/programs/{programName}"
def getBuildTreeBootloaderDir (BuildTree root) = "{root}/bootloader"
def getBuildTreeReportDir     buildRoot simulator programName =
  "{buildRoot.getBuildTreeSimExecuteDir simulator programName}/report"
def getBuildTreeMCSDir        (BuildTree root) = "{root}/mcs"

global def rtlTarget dut _buildRoot = dut

global def compileSimTarget dut buildRoot =
  def opts = makeUserSimulationOptions "verilator" False (buildRoot.getBuildTreeSimulationDir "verilator")
  verilatorCompile dut opts

global topic vivadoVsrcHooks : (dut: DUT) => Option (Unit => List Path)
global topic vivadoBlackBoxResources : DUT => Option (List String)

global def fpgaSynthTarget board dut buildRoot =
  setUpBitstream board dut buildRoot
  | runFPGASynthOnly

global def bitstreamTarget board dut buildRoot =
  setUpBitstream board dut buildRoot
  | makeBitstream

def setUpBitstream board dut buildRoot =
  def name = dut.getDUTName
  def vendor = "xilinx"
  def tclFiles = filter (matches `.*\.vivado\.tcl` _.getPathName) dut.getDUTSources
  def vsrcs =
    subscribe vivadoVsrcHooks
    | mapPartial (_ dut)
    | map (_ Unit)
    | flatten
    | (dut.getDUTVsrcs ++ _)
  def resources =
    subscribe vivadoBlackBoxResources
    | mapPartial (_ dut)
    | map (sortBy (_<*_))
    | flatten

  def topModule = dut.getDUTTopModule

  def visibleFiles =
    sourcesInDUT `.*\.sdc` dut
    ++ sourcesInDUT `.*\.xdc` dut
    ++ sourcesInDUT `.*\.tcl` dut

  makeBitstreamPlan name vendor board topModule buildRoot.getBuildTreeMCSDir
  | setBitstreamPlanVsrcs vsrcs
  | editBitstreamPlanResources(resources ++ _)
  | setBitstreamPlanVisibleFiles visibleFiles
  | setBitstreamPlanTclFiles tclFiles

global topic dutTests : DUTTest

# Options for configuration a SimTarget. Used with simTargetV2.
tuple SimTargetOptions =
  global SimName: String  # Simulator name, e.g. "verilator"
  global Waves: Boolean  # Enable waveform dumping
  global Coverage: Boolean  # Enable coverage metrics collection

  # A filter function for filtering tests that should be run. It should accept a
  # single DUTTest as an argument, returning True if the test should be run and
  # False if the test should be skipped.
  global TestFilter: DUTTest => Boolean

global def makeSimTargetOptions simName waves =
  def coverage = False
  def testFilter _dutTest = True
  SimTargetOptions simName waves coverage testFilter

# A target that can be used with runPlatform to run a suite of simulation tests
# and return a Result indicating whether or not all tests passed.
global def simTargetV2 dut buildRoot simTargetOptions =
  def simName = simTargetOptions.getSimTargetOptionsSimName
  def waves = simTargetOptions.getSimTargetOptionsWaves
  def coverage = simTargetOptions.getSimTargetOptionsCoverage
  def testFilter = simTargetOptions.getSimTargetOptionsTestFilter

  def dutTests = subscribe dutTests | filter (_.getDUTTestFilter dut) | filter testFilter
  def simOutputs =
    dutTests
    | map (
        \dutTest
        Pair
        dutTest.getDUTTestProgram.getTestProgramPlanName
        (singleSimOutput simName waves coverage dut buildRoot dutTest)
    )

  def getSimCheckerOptions programName =
    def filter = (\_ True)
    def outputDir = buildRoot.getBuildTreeReportDir simName programName
    makeSimCheckerOptions filter outputDir

  def allPassed =
    simOutputs
    | map (
        \(Pair programName simOutput)
        simCheckerGetResult dut simChecker simOutput (getSimCheckerOptions programName)
    )
    | forall isTestResultPass

  # A multiline string containing a report of test successes and failures.
  def testReport =
    simOutputs
    | map (
        \(Pair programName simOutput)
        reportSimulationOutputs simChecker dut simOutput (getSimCheckerOptions programName)
    )
    | zip dutTests
    | map getDUTTestName.editPairFirst
    | aggregateTestResults

  def _ = println testReport

  if empty dutTests then
    Fail "No tests found"
  else if allPassed then
    Pass "All tests passed"
  else
    Fail "Some tests failed"

# A target that can be used with runPlatform to run a suite of simulation tests
# and return a Result indicating whether or not all tests passed.
#
# Deprecated: Use simTargetV2 instead.
global def simTarget dut buildRoot simName waves =
  def simTargetOptions = makeSimTargetOptions simName waves
  simTargetV2 dut buildRoot simTargetOptions

global def aggregateTestResults pairs =
  pairs
  | map (\(Pair testName report) "- test: {testName}\n  msg: {report}")
  | catWith "\n"
  | ("\n===== TEST RESULTS =====\n{_}\n")

def singleSimOutput simName waves coverage dut buildRoot dutTest =
  def programName = dutTest.getDUTTestProgram.getTestProgramPlanName
  def testProgram =
    def testProgramPlan = dutTest.getDUTTestProgram
    def outputDir = buildRoot.getBuildTreeProgramDir testProgramPlan.getTestProgramPlanName
    testProgramPlanToProgramCompileOptions testProgramPlan outputDir

  def testPlusargs = dutTest.getDUTTestPlusargs

  def userSimulationOptions =
    def outputDir = buildRoot.getBuildTreeSimulationDir simName
    def withExecutePlusargs = (_)
    def executeOutputDir = buildRoot.getBuildTreeSimExecuteDir simName programName
    def withCoverage coverage simOpts =
      if coverage then
        simOpts
        | setUserSimulationOptionsCoverageDir (Some "{executeOutputDir}/coverage")
        | setUserSimulationOptionsCoverageTestName (Some dutTest.getDUTTestName)
      else
        simOpts
    makeUserSimulationOptionsV2 simName waves coverage outputDir
    | editUserSimulationOptionsExecutePlusargs withExecutePlusargs
    | setUserSimulationOptionsExecuteOutputDir executeOutputDir
    | setUserSimulationOptionsCompileOutputDir (buildRoot.getBuildTreeSimCompileDir simName)
    | withCoverage coverage

  def simulationOptions =
    dut
    | getDUTSimulationOptions
    | runSimulationBootloader dut bootloaderOptions bootloader
    | editDUTSimulationOptionsExecuteOptions (editDUTSimExecuteOptionsPlusargs (testPlusargs ++ _))

  def bootloader = dutTest.getDUTTestBootloader

  def bootloaderOptions =
    def filter = (\_ True)
    def outputDir = buildRoot.getBuildTreeBootloaderDir
    def finalLoaderOptions = makeProgramLoaderOptions filter testProgram outputDir
    makeSimBootloaderOptions filter finalLoaderOptions outputDir

  simulateDUT dut simulationOptions userSimulationOptions

def simChecker =
  def name = "simultion-test-finisher-checker"
  def score = (\_ \_ 1.0)

  def result _dut outputs _options =
    def statusFile =
      def result =
        def simOutputs = outputs.getSimulationOutputOutputs
        simOutputs
        | map getPathResult
        | findFail
        | rmap (\_ find (matches `([^/]*/)*status\.log` _.getPathName) simOutputs)
      match result
        Pass (Some (Pair f _)) = f
        Pass (None) = "no status.log file found".makeError.makeBadPath
        Fail e = e.makeBadPath

    def checkStatus statusFileContents =
      def failRegex = `^FAILED with status (.*)$`
      def passRegex = `^PASSED$`
      def failStatus =
        if matches failRegex statusFileContents
        then (extract failRegex statusFileContents).head
        else None
      def passMatch = matches passRegex statusFileContents
      match failStatus passMatch
        None          True  = makeTestResultPass statusFileContents
        None          False = makeTestResultFail statusFileContents None
        (Some status) _     = makeTestResultFail statusFileContents status.int

    def testResult =
      def statusResult =
        statusFile
        | read
        | rmap checkStatus
      match statusResult
        Pass status = status
        Fail e = makeTestResultFail e.getErrorCause None
    testResult

  def reporter dut outputs options =
    # These files are written but never read by the build itself
    def _simErr = match outputs.getSimulationOutputStderr
      Fail e = makeBadPath e
      Pass contents = write "{options.getSimCheckerOptionsOutputDir}/sim.err" contents
    def _simOut = match outputs.getSimulationOutputStdout
      Fail e = makeBadPath e
      Pass contents = write "{options.getSimCheckerOptionsOutputDir}/sim.out" contents
    match (result dut outputs options)
      TestFail failed = "FAILED: {failed.getTestFailedMsg}"
      TestPass passed = passed.getTestPassedMsg

  makeSimCheckerPlan name score result reporter
  | makeSimChecker

global def singleSimTarget simName waves dut buildRoot dutTest =
  def programName = dutTest.getDUTTestProgram.getTestProgramPlanName

  def simCheckerOptions =
    def filter = (\_ True)
    def outputDir = buildRoot.getBuildTreeReportDir simName programName
    makeSimCheckerOptions filter outputDir

  def coverage = False
  singleSimOutput simName waves coverage dut buildRoot dutTest
  | (reportSimulationOutputs simChecker dut _ simCheckerOptions)

global data Simulator =
  VCS
  VCS_Waves
  Verilator
  Verilator_Waves
  Xcelium
  Xcelium_Waves

def simulatorToString = match _
  VCS             = "vcs"
  VCS_Waves       = "vcs"
  Verilator       = "verilator"
  Verilator_Waves = "verilator"
  Xcelium         = "xcelium"
  Xcelium_Waves   = "xcelium"

def simulatorToWaves = match _
  VCS_Waves       = True
  Verilator_Waves = True
  Xcelium_Waves   = True
  _               = False

def defaultSim = Verilator

global def runSim dut = runSimWith dut defaultSim

global def runSimWith dut sim =
  def simTargetOptions = makeSimTargetOptions sim.simulatorToString sim.simulatorToWaves
  runPlatform rocketChipPlatform dut simTargetV2 simTargetOptions

global def runSingleSim dut testName =
  runSingleSimWith dut testName defaultSim

global def runSingleSimWith dut testName sim =
  def testFilter dutTest =
    dutTest.getDUTTestName ==~ testName
  def simTargetOptions =
    makeSimTargetOptions sim.simulatorToString sim.simulatorToWaves
    | setSimTargetOptionsTestFilter testFilter
  runPlatform rocketChipPlatform dut simTargetV2 simTargetOptions

# Run a simulation with SimTargetOptions.
#
# More flexible than runSim, but more verbose to type on the command line.
#
# Examples:
#   Run VCS without waves:
#     runSimV2 pioDUT (makeSimTargetOptions "vcs" False)
#
#   Run Verilator with waves and coverage:
#     runSimV2 pioDUT (makeSimTargetOptions "vcs" True | setSimTargetOptionsCoverage True)
#
#   Run Xcelium without waves but with coverage:
#     runSimV2 pioDUT (makeSimTargetOptions "xcelium" False | setSimTargetOptionsCoverage True)
global def runSimV2 dut simTargetOptions =
  runPlatform rocketChipPlatform dut simTargetV2 simTargetOptions

global def makeRTL dut = runPlatform rocketChipPlatform dut rtlTarget

global def compileSim dut = runPlatform rocketChipPlatform dut compileSimTarget

global def runBitstream board dut = runPlatform rocketChipPlatform dut board.bitstreamTarget

global def runPlatform platform dutPlan targ =
  def buildTree = buildTreeSubDir dutPlan.getRocketChipDUTPlanName rootBuildTree
  def dutResult = buildTree.platform dutPlan
  match dutResult
    Pass dut = targ dut buildTree
    Fail e   = panic "DUT compilation failed: {format e}"


global def rocketChipPlatform buildRoot =
  (rocketChipDUTMaker _ buildRoot.userDUTArgs)

def userDUTArgs buildRoot =
  def firrtlDir = mkdir buildRoot.getBuildTreeFirrtlDir
  def verilogDir = mkdir buildRoot.getBuildTreeVerilogDir
  makeRuntimeRocketChipDUTArgs firrtlDir verilogDir
