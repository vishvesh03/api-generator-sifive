tuple XceliumCompilePlan =
  global Resources:   List String
  global IncludeDirs: List String
  global LibraryDirs: List String # Verilog library directories as used in -y option
  global Defines:     List NamedArg
  global SourceFiles: List Path
  global Plusargs:    List NamedArg
  global ExtraArgs:   List NamedArg
  global Visible:     List Path
  global FHomeDir:    String # func from output dir to home dir
  global OutputDir:   String
  global CoverageMetrics: XceliumCoverageMetrics

def defaultXceliumVersion = "cadence/xcelium/18.09.004"

global def makeXceliumCompilePlan sourceFiles outputDir =
  XceliumCompilePlan
  (defaultXceliumVersion, Nil) # Resources
  Nil                # IncludeDirs
  Nil                # LibraryDirs
  Nil                # Defines
  sourceFiles        # Files
  Nil                # Plusargs
  Nil                # ExtraArgs
  Nil                # Visible
  "{outputDir}/home" # FHomeDir
  outputDir          # OutputDir
  makeXceliumCoverageMetrics # CoverageMetrics

def xrunWrapperScript = simplify "{here}/../scripts/xcelium_wrapper"

def compileCmdlineArgs options =
  def outputDir    = options.getXceliumCompilePlanOutputDir
  def plusargs     = options.getXceliumCompilePlanPlusargs
  def includeDirs  = options.getXceliumCompilePlanIncludeDirs
  def libraryDirs  = options.getXceliumCompilePlanLibraryDirs
  def defines      = options.getXceliumCompilePlanDefines
  def rawFiles     = options.getXceliumCompilePlanSourceFiles
  def coverageMetrics = options.getXceliumCompilePlanCoverageMetrics
  def otherArgs    = namedArgsToListString runDir options.getXceliumCompilePlanExtraArgs

  def files = distinctBy (scmpIdentifier _.getPathName _.getPathName) rawFiles
  def runDir = outputDir

  def includeArgs = map (\i "+incdir+{relative runDir i}") includeDirs
  def libraryDirArgs = mapFlat (\i '-y', (relative runDir i), Nil) libraryDirs
  def coverageArgs = getXceliumCoverageMetricsCmdLineArgs coverageMetrics
  def defineArgs  = namedArgsToCmdline runDir "+define+" "=" defines
  def plusargArgs = namedArgsToCmdline runDir "+" "=" plusargs
  def fileArgs = map (relative runDir _.getPathName) files

  relative runDir xrunWrapperScript,
  includeArgs
  ++ libraryDirArgs
  ++ coverageArgs
  ++ defineArgs
  ++ plusargArgs
  ++ otherArgs
  ++ fileArgs

def compileInputs options =
  def outputDir    = options.getXceliumCompilePlanOutputDir
  def includeDirs  = options.getXceliumCompilePlanIncludeDirs
  def libraryDirs  = options.getXceliumCompilePlanLibraryDirs
  def srcFiles     = options.getXceliumCompilePlanSourceFiles
  def homeDir      = options.getXceliumCompilePlanFHomeDir
  def visibleFiles = options.getXceliumCompilePlanVisible

  def includeSources = map (sources _ `.*`) includeDirs | flatten
  def librarySources = map (sources _ `.*`) libraryDirs | flatten
  def homeSources = sources homeDir `.*`

  source xrunWrapperScript, mkdir outputDir, includeSources ++ librarySources ++ srcFiles ++ homeSources ++ visibleFiles

global def doXceliumCompile options =
  def outputDir = options.getXceliumCompilePlanOutputDir
  def cmdline = options.compileCmdlineArgs
  def inputs = options.compileInputs

  def homeDirEnv =
    def rawHomeDir = options.getXceliumCompilePlanFHomeDir
    def homeDir = mkdir rawHomeDir
    "HOME={relative outputDir homeDir.getPathName}"

  def foutputs _ =
    def allIn subDir = files "{outputDir}/xcelium.d/{subDir}" `.*`
    files outputDir `.*`
  def xrunJob =
    makePlan cmdline inputs
    | setPlanLocalOnly True
    | setPlanFnOutputs foutputs
    | setPlanDirectory outputDir
    | editPlanEnvironment (homeDirEnv, _)
    | setPlanResources options.getXceliumCompilePlanResources
    | runJob
  def xrunOutputs = xrunJob.getJobOutputs
  XceliumCompileOutputs options xrunOutputs

tuple XceliumCompileOutputs =
  global InputOptions: XceliumCompilePlan
  global AllOutputs:   List Path


tuple XceliumExecutePlan =
  global Resources:      List String
  global ExtraArgs:      List NamedArg
  global OutputDir:      String
  global Plusargs:       List NamedArg
  global VisibleFiles:   List Path
  global CompileOutputs: XceliumCompileOutputs
  # Path to base coverage work directory. Argument to -covworkdir.
  global CoverageWorkDir: Option String
  # Directory name for coverage models. Argument to -covscope.
  global CoverageScope: Option String
  # Directory name for coverage results for one run. Argument to -covtest.
  global CoverageTest: Option String

global def makeXceliumExecutePlan compileOuts outputDir =
  XceliumExecutePlan
  (defaultXceliumVersion, Nil) # Resources
  Nil         # ExtraArgs
  outputDir   # OutputDir
  Nil         # Plusargs
  Nil         # VisibleFiles
  compileOuts # CompileOutputs
  None        # CoverageWorkDir
  None        # CoverageScope
  None        # CoverageTest

global def doXceliumExecute options =
  def outputDir = options.getXceliumExecutePlanOutputDir
  def compileOutputs = options.getXceliumExecutePlanCompileOutputs
  def compileOptions = compileOutputs.getXceliumCompileOutputsInputOptions
  def covWorkDir = options.getXceliumExecutePlanCoverageWorkDir
  def covScope = options.getXceliumExecutePlanCoverageScope
  def covTest = options.getXceliumExecutePlanCoverageTest

  def inputs =
    def compileDir = compileOutputs.getXceliumCompileOutputsInputOptions.getXceliumCompilePlanOutputDir.mkdir
    def allCompileOutputs = compileOutputs.getXceliumCompileOutputsAllOutputs
    def extraSources = options.getXceliumExecutePlanVisibleFiles
    compileDir, homeDir, mkdir outputDir, allCompileOutputs ++ extraSources

  def cmdline =
    def xmLibDir =
      "-xmlibdirpath",
      relative outputDir compileOptions.getXceliumCompilePlanOutputDir,
      Nil
    def base = "xrun", Nil
    def extraArgs = namedArgsToListString outputDir options.getXceliumExecutePlanExtraArgs
    def plusargs = namedArgsToCmdline outputDir "+" "=" options.getXceliumExecutePlanPlusargs
    def coverageArgs =
      def dirArgs = match covWorkDir
        Some dir = "-covworkdir", relative outputDir dir, Nil
        None = Nil
      def scopeArgs = match covScope
        Some name = "-covscope", name, Nil
        None = Nil
      def nameArgs = match covTest
        Some name = "-covtest", name, Nil
        None = Nil
      dirArgs ++ scopeArgs ++ nameArgs
    base ++ plusargs ++ extraArgs ++ coverageArgs ++ xmLibDir

  def rawHomeDir = compileOptions.getXceliumCompilePlanFHomeDir
  def homeDir = mkdir rawHomeDir
  def homeDirEnv = "HOME={relative outputDir homeDir.getPathName}"

  def fnOutputs outputs =
    def compileDir = compileOptions.getXceliumCompilePlanOutputDir
    def compileDirRegExp = regExpCat (compileDir.simplify.quote, `/.*`, Nil)
    filter (\p !(matches compileDirRegExp) p) outputs

  def jobResult =
    makePlan cmdline inputs
    | setPlanDirectory outputDir
    | setPlanFnOutputs fnOutputs
    | editPlanEnvironment (homeDirEnv, _)
    | setPlanResources options.getXceliumExecutePlanResources
    | runJob

  XceliumExecuteOutputs options jobResult

tuple XceliumExecuteOutputs =
  InputOptions_:       XceliumExecutePlan
  Job_:                Job

global def getXceliumExecuteOutputsRawOutputs   = _.getXceliumExecuteOutputsJob_.getJobFailedOutputs
global def getXceliumExecuteOutputsStdout       = _.getXceliumExecuteOutputsJob_.getJobStdout
global def getXceliumExecuteOutputsStderr       = _.getXceliumExecuteOutputsJob_.getJobStderr
global def getXceliumExecuteOutputsStatus       = _.getXceliumExecuteOutputsJob_.getJobStatus
global def getXceliumExecuteOutputsInputOptions = getXceliumExecuteOutputsInputOptions_
global def getXceliumExecuteOutputsJob          = getXceliumExecuteOutputsJob_


# Coverage metrics to enable with the -overage flag to Xcelium
tuple XceliumCoverageMetrics =
  global Block: Boolean
  global Expr: Boolean
  global FSM: Boolean
  global Toggle: Boolean
  global Functional: Boolean
  global All: Boolean

global def makeXceliumCoverageMetrics =
  XceliumCoverageMetrics False False False False False False

# Get coverage metrics suitable for passing to Xcelium.
#
# Example: -coverage B:E:T
def getXceliumCoverageMetricsCmdLineArgs metrics =
  def args =
    (if metrics.getXceliumCoverageMetricsBlock then "B", Nil else Nil) ++
    (if metrics.getXceliumCoverageMetricsExpr then "E", Nil else Nil) ++
    (if metrics.getXceliumCoverageMetricsFSM then "F", Nil else Nil) ++
    (if metrics.getXceliumCoverageMetricsToggle then "T", Nil else Nil) ++
    (if metrics.getXceliumCoverageMetricsFunctional then "U", Nil else Nil) ++
    (if metrics.getXceliumCoverageMetricsAll then "A", Nil else Nil)

  if empty args then
    Nil
  else
    "-coverage", catWith ":" args, Nil
