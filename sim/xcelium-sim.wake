tuple XceliumDUTSimulatorPlan =
  global TestDriver:     String
  global Waves:          Boolean
  global Coverage:       Boolean
  global Score:          DUT => DUTSimCompileOptions => DUTSimExecuteOptions => UserSimulationOptions => Double
  global CompileOptions: DUT => PrivateXceliumDUTSimCompileOptions
  global ExecuteOptions: DUT => PrivateXceliumDUTSimExecuteOptions

global def makeXceliumDUTSimulatorPlan testDriver waves score compileOptions executeOptions =
  def coverage = False
  XceliumDUTSimulatorPlan testDriver waves coverage score compileOptions executeOptions


tuple PrivateXceliumDUTSimCompileOptions =
  global DUTOpts:   DUTSimCompileOptions
  global ExtraArgs: List NamedArg
  global LibraryDirs: List String # Verilog library include directories. These should be relative to the workspace root.

global def defaultXceliumResources = "cadence/xcelium/18.09.004", Nil

global def makePrivateXceliumDUTSimCompileOptions =
  def dutOpts =
    emptyDUTSimCompileOptions
    | setDUTSimCompileOptionsResources defaultXceliumResources
  PrivateXceliumDUTSimCompileOptions dutOpts Nil Nil

def toXceliumSimCompilePlan privateOpts outputDir coverage =
  def dutOpts      = privateOpts.getPrivateXceliumDUTSimCompileOptionsDUTOpts

  def includeDirs    = dutOpts.getDUTSimCompileOptionsIncludeDirs
  def libraryDirs    = dutOpts.getDUTSimCompileOptionsLibraryDirs
  def defines        = dutOpts.getDUTSimCompileOptionsDefines
  def sourceFiles    = dutOpts.getDUTSimCompileOptionsSourceFiles
  def plusargs       = dutOpts.getDUTSimCompileOptionsPlusargs
  def resources      = dutOpts.getDUTSimCompileOptionsResources
  def visibleFiles   = dutOpts.getDUTSimCompileOptionsVisibleFiles
  def extraArgs      = privateOpts.getPrivateXceliumDUTSimCompileOptionsExtraArgs
  def extraLibraryDirs = privateOpts.getPrivateXceliumDUTSimCompileOptionsLibraryDirs
  def withCoverage coverageEnabled plan =
    def editFn oldMetrics =
      if coverageEnabled then defaultCoverageMetrics else oldMetrics
    editXceliumCompilePlanCoverageMetrics editFn plan

  makeXceliumCompilePlan sourceFiles outputDir
  | setXceliumCompilePlanResources      resources
  | setXceliumCompilePlanExtraArgs      extraArgs
  | setXceliumCompilePlanIncludeDirs    includeDirs
  | setXceliumCompilePlanLibraryDirs    (libraryDirs ++ extraLibraryDirs)
  | setXceliumCompilePlanDefines        defines
  | setXceliumCompilePlanPlusargs       plusargs
  | setXceliumCompilePlanVisible        visibleFiles
  | withCoverage                        coverage


tuple PrivateXceliumDUTSimExecuteOptions =
  global DUTOpts:   DUTSimExecuteOptions
  global ExtraArgs: List NamedArg

global def makePrivateXceliumDUTSimExecuteOptions =
  def dutOpts =
    emptyDUTSimExecuteOptions
    | setDUTSimExecuteOptionsResources defaultXceliumResources
  PrivateXceliumDUTSimExecuteOptions dutOpts Nil

def toXceliumSimExecutePlan opts compileOutputs outputDir coverageOpts =
  def dutOpts = opts.getPrivateXceliumDUTSimExecuteOptionsDUTOpts

  def resources      = dutOpts.getDUTSimExecuteOptionsResources
  def plusargs       = dutOpts.getDUTSimExecuteOptionsPlusargs
  def visibleFiles   = dutOpts.getDUTSimExecuteOptionsVisibleFiles

  def extraArgs      = opts.getPrivateXceliumDUTSimExecuteOptionsExtraArgs

  def withCoverageOpts coverageOpts plan = match coverageOpts
    None = plan
    Some (Pair maybeDir maybeName) =
      plan
      | editXceliumExecutePlanCoverageWorkDir (maybeDir | orElse _)
      | editXceliumExecutePlanCoverageTest (maybeName | orElse _)

  makeXceliumExecutePlan compileOutputs outputDir
  | setXceliumExecutePlanResources      resources
  | setXceliumExecutePlanPlusargs       plusargs
  | setXceliumExecutePlanVisibleFiles   visibleFiles
  | setXceliumExecutePlanExtraArgs      extraArgs
  | withCoverageOpts                    coverageOpts

global topic xceliumDUTSimCompileOptionsHooks : DUT => Option (PrivateXceliumDUTSimCompileOptions => PrivateXceliumDUTSimCompileOptions)
global topic xceliumDUTSimExecuteOptionsHooks : DUT => Option (PrivateXceliumDUTSimExecuteOptions => PrivateXceliumDUTSimExecuteOptions)

# takes a XceliumDUTSimulatorPlan and makes a DUTSimulator
global def makeXceliumDUTSimulator plan =
  def simName   = "xcelium"
  def simVendor = "synopsys"
  def testDriver = plan.getXceliumDUTSimulatorPlanTestDriver
  def waves  = plan.getXceliumDUTSimulatorPlanWaves
  def coverage  = plan.getXceliumDUTSimulatorPlanCoverage
  def score  = plan.getXceliumDUTSimulatorPlanScore

  def imp dut rawCompileOptions rawExecuteOptions userOptions =
    def compileOutputs =
      def appendUserPlusargs = editDUTSimCompileOptionsPlusargs (_ ++ userOptions.getUserSimulationOptionsCompilePlusargs)
      def appendDUTOptions = (appendDUTSimCompileOptions rawCompileOptions)
      def privateOpts =
        plan.getXceliumDUTSimulatorPlanCompileOptions dut
        | editPrivateXceliumDUTSimCompileOptionsDUTOpts appendDUTOptions
        | editPrivateXceliumDUTSimCompileOptionsDUTOpts appendUserPlusargs
        | applyPartialEdits dut (subscribe xceliumDUTSimCompileOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsCompileOutputDir
      toXceliumSimCompilePlan privateOpts outputDir coverage
      | doXceliumCompile

    def executeOutputs =
      def appendUserPlusargs = editDUTSimExecuteOptionsPlusargs (_ ++ userOptions.getUserSimulationOptionsExecutePlusargs)
      def appendDUTOptions = (appendDUTSimExecuteOptions rawExecuteOptions)
      def privateOpts =
        plan.getXceliumDUTSimulatorPlanExecuteOptions dut
        | editPrivateXceliumDUTSimExecuteOptionsDUTOpts appendDUTOptions
        | editPrivateXceliumDUTSimExecuteOptionsDUTOpts appendUserPlusargs
        | applyPartialEdits dut (subscribe xceliumDUTSimExecuteOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsExecuteOutputDir
      def covDir = userOptions.getUserSimulationOptionsCoverageDir
      def covName = userOptions.getUserSimulationOptionsCoverageTestName
      def coverageOpts =
        if coverage then
          Some (Pair covDir covName)
        else
          None
      toXceliumSimExecutePlan privateOpts compileOutputs outputDir coverageOpts
      | doXceliumExecute

    executeOutputs
    | getXceliumExecuteOutputsJob
    | makeSimulationOutput

  makeDUTSimulatorPlan simName simVendor testDriver waves score imp
  | setDUTSimulatorPlanCoverage coverage
  | makeDUTSimulator


def xceliumCompileOptsExtract waves dut =
  def extraArgs =
    NamedArg "-64bit",
    NamedArg "-elaborate",
    NamedArg "-uvmhome",
    NamedArg "CDNS-1.2",
    NamedArg "-xmfatal",
    NamedArg "LIBNOF",
    NamedArg "-sv",
    NamedArg "-timescale 1ns/10ps",
    NamedArg "-licqueue",
    NamedArg "-access",
    NamedArg "+C",
    NamedArg "-libverbose",
    NamedArg "-message",
    NamedArg "-work",
    NamedArg "worklib",
    NamedArg "-view",
    NamedArg "rtl",
    Nil
  
  def withWavesOptions opts =
    if waves
    then
      def withExtraArgs = NamedArg "-access", NamedArg "-rwc", _
      def withDefines = NamedArg "DEBUG", _
      opts
      | editPrivateXceliumDUTSimCompileOptionsDUTOpts (editDUTSimCompileOptionsDefines withDefines)
      | editPrivateXceliumDUTSimCompileOptionsExtraArgs withExtraArgs
    else opts

  def genericOpts =
    freedomTestDriverSimCompileOpts dut
    | editDUTSimCompileOptionsDefines (NamedArg "Xcelium", _)

  makePrivateXceliumDUTSimCompileOptions
  | editPrivateXceliumDUTSimCompileOptionsDUTOpts genericOpts.appendDUTSimCompileOptions
  | setPrivateXceliumDUTSimCompileOptionsExtraArgs extraArgs
  | withWavesOptions

def xceliumExecuteOptsExtract waves dut =
  def withWavesOptions opts =
    if waves
    then
      opts
      | editPrivateXceliumDUTSimExecuteOptionsDUTOpts (editDUTSimExecuteOptionsPlusargs (NamedArgString "vcdfile" "sim.vcd", _))
    else opts

  def genericOpts = freedomTestDriverSimExecuteOpts dut

  makePrivateXceliumDUTSimExecuteOptions
  | editPrivateXceliumDUTSimExecuteOptionsExtraArgs (NamedArg "-R", _)
  | editPrivateXceliumDUTSimExecuteOptionsDUTOpts genericOpts.appendDUTSimExecuteOptions
  | withWavesOptions

def defaultCoverageMetrics =
  makeXceliumCoverageMetrics
  | setXceliumCoverageMetricsBlock True
  | setXceliumCoverageMetricsExpr True
  | setXceliumCoverageMetricsToggle True

def makeFreedomXceliumDUTSimulator waves coverage =
  def name = "xcelium"
  def score = (\_ \_ \_ \_ 1.0) # TODO
  def compileOptions = xceliumCompileOptsExtract waves
  def executeOptions = xceliumExecuteOptsExtract waves
  makeXceliumDUTSimulatorPlan name waves score compileOptions executeOptions
  | setXceliumDUTSimulatorPlanCoverage coverage
  | makeXceliumDUTSimulator


publish dutSimulators =
  freedomXceliumDUTSimulator,
  freedomXceliumWavesDUTSimulator,
  freedomXceliumCoverageDUTSimulator,
  freedomXceliumWavesCoverageDUTSimulator,
  Nil

global def freedomXceliumDUTSimulator = makeFreedomXceliumDUTSimulator False False
global def freedomXceliumWavesDUTSimulator = makeFreedomXceliumDUTSimulator True False
global def freedomXceliumCoverageDUTSimulator = makeFreedomXceliumDUTSimulator False True
global def freedomXceliumWavesCoverageDUTSimulator = makeFreedomXceliumDUTSimulator True True
